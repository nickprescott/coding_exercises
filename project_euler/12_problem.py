"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
"""

def generate_triangle_num():
    total, a = 1,1
    yield total
    while True:
        a +=1
        total += a
        yield total

def list_divisors(num):
    divisors = set()
    counter = int(num**0.5) +1
    #once you find the divisors that are less than the sqr root, do num/divisor to find the matching pair: ex: 100, sqr_root = 10, divisors are 10, 5, 2, 1. 100/5 = 20, 100/2 = 50, 100/1 = 100. divisors = 100, 50, 20, 10, 5, 2, 1
    while counter > 1:
        if num % counter == 0:
            divisors.add(counter)
            divisors.add(num/counter)
        counter -=1
        divisors.add(num)
        divisors.add(1)
    return divisors

for x in generate_triangle_num():
    a = list_divisors(x)
    if len(a) > 500:
        print x
        print a
        break

